// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: leafgo_api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package leaf_go

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetSegmentReq struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSegmentReq) Reset()         { *m = GetSegmentReq{} }
func (m *GetSegmentReq) String() string { return proto.CompactTextString(m) }
func (*GetSegmentReq) ProtoMessage()    {}
func (*GetSegmentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c34591ec5df4c23, []int{0}
}
func (m *GetSegmentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSegmentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSegmentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSegmentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSegmentReq.Merge(m, src)
}
func (m *GetSegmentReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSegmentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSegmentReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSegmentReq proto.InternalMessageInfo

type GetSegmentRsp struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSegmentRsp) Reset()         { *m = GetSegmentRsp{} }
func (m *GetSegmentRsp) String() string { return proto.CompactTextString(m) }
func (*GetSegmentRsp) ProtoMessage()    {}
func (*GetSegmentRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c34591ec5df4c23, []int{1}
}
func (m *GetSegmentRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSegmentRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSegmentRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSegmentRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSegmentRsp.Merge(m, src)
}
func (m *GetSegmentRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetSegmentRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSegmentRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSegmentRsp proto.InternalMessageInfo

type GetSnowflakeReq struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSnowflakeReq) Reset()         { *m = GetSnowflakeReq{} }
func (m *GetSnowflakeReq) String() string { return proto.CompactTextString(m) }
func (*GetSnowflakeReq) ProtoMessage()    {}
func (*GetSnowflakeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c34591ec5df4c23, []int{2}
}
func (m *GetSnowflakeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSnowflakeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSnowflakeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSnowflakeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSnowflakeReq.Merge(m, src)
}
func (m *GetSnowflakeReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSnowflakeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSnowflakeReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSnowflakeReq proto.InternalMessageInfo

type GetSnowflakeRsp struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSnowflakeRsp) Reset()         { *m = GetSnowflakeRsp{} }
func (m *GetSnowflakeRsp) String() string { return proto.CompactTextString(m) }
func (*GetSnowflakeRsp) ProtoMessage()    {}
func (*GetSnowflakeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c34591ec5df4c23, []int{3}
}
func (m *GetSnowflakeRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSnowflakeRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSnowflakeRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSnowflakeRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSnowflakeRsp.Merge(m, src)
}
func (m *GetSnowflakeRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetSnowflakeRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSnowflakeRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSnowflakeRsp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetSegmentReq)(nil), "leaf_go.v1.GetSegmentReq")
	proto.RegisterType((*GetSegmentRsp)(nil), "leaf_go.v1.GetSegmentRsp")
	proto.RegisterType((*GetSnowflakeReq)(nil), "leaf_go.v1.GetSnowflakeReq")
	proto.RegisterType((*GetSnowflakeRsp)(nil), "leaf_go.v1.GetSnowflakeRsp")
}

func init() { proto.RegisterFile("leafgo_api.proto", fileDescriptor_8c34591ec5df4c23) }

var fileDescriptor_8c34591ec5df4c23 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x4f, 0x4f, 0x32, 0x31,
	0x10, 0xc6, 0xd9, 0xe5, 0xcd, 0x6b, 0x6c, 0x44, 0x49, 0x63, 0x0c, 0x2e, 0xba, 0x4a, 0xbd, 0x78,
	0xb1, 0x1b, 0x35, 0xf1, 0x03, 0x98, 0x18, 0x2e, 0x1e, 0x0c, 0xdc, 0x8c, 0x09, 0x29, 0x30, 0x5b,
	0x1b, 0x60, 0xa7, 0xb2, 0x05, 0xc3, 0xd5, 0xab, 0x47, 0x2f, 0x7e, 0x24, 0x8e, 0x26, 0x7e, 0x01,
	0x45, 0x3f, 0x88, 0xd9, 0x2e, 0x84, 0x3f, 0xba, 0xb7, 0x99, 0xf9, 0x3d, 0x7d, 0xa6, 0xcf, 0x90,
	0x62, 0x17, 0x44, 0x28, 0xb1, 0x21, 0xb4, 0xe2, 0xba, 0x8f, 0x06, 0x29, 0x49, 0x26, 0x0d, 0x89,
	0x7c, 0x78, 0xea, 0x9d, 0x48, 0x65, 0xee, 0x07, 0x4d, 0xde, 0xc2, 0x5e, 0x20, 0x51, 0x62, 0x60,
	0x25, 0xcd, 0x41, 0x68, 0x3b, 0xdb, 0xd8, 0x2a, 0x7d, 0xea, 0x95, 0x25, 0xa2, 0xec, 0xc2, 0x5c,
	0x05, 0x3d, 0x6d, 0x46, 0x53, 0xb8, 0x37, 0x85, 0x42, 0xab, 0x40, 0x44, 0x11, 0x1a, 0x61, 0x14,
	0x46, 0x71, 0x4a, 0x59, 0x85, 0x14, 0xaa, 0x60, 0xea, 0x20, 0x7b, 0x10, 0x99, 0x1a, 0x3c, 0xd0,
	0x22, 0xc9, 0x77, 0x60, 0x54, 0x72, 0x0e, 0x9d, 0xe3, 0xf5, 0x5a, 0x52, 0xb2, 0x83, 0x25, 0x49,
	0xac, 0xe9, 0x26, 0x71, 0x55, 0xdb, 0x2a, 0xf2, 0x35, 0x57, 0xb5, 0xd9, 0x11, 0xd9, 0x4a, 0x04,
	0x11, 0x3e, 0x86, 0x5d, 0xd1, 0x81, 0xbf, 0x5d, 0x2a, 0x2b, 0xa2, 0xdf, 0x3e, 0x67, 0xcf, 0x2e,
	0x29, 0x5c, 0x83, 0x08, 0xab, 0x58, 0x87, 0xfe, 0x50, 0xb5, 0x80, 0x5e, 0x90, 0x7f, 0x37, 0x2a,
	0x92, 0x74, 0x87, 0xa7, 0x21, 0xf8, 0x2c, 0x21, 0xbf, 0x4a, 0x12, 0x7a, 0x19, 0x73, 0x7a, 0x47,
	0xc8, 0xfc, 0xcb, 0x74, 0x97, 0xcf, 0x4f, 0xcb, 0x97, 0xd2, 0x7a, 0x59, 0x28, 0xd6, 0xac, 0xf4,
	0xf4, 0xfe, 0xfd, 0xe2, 0x52, 0x56, 0xb4, 0x97, 0x8b, 0x53, 0x10, 0x48, 0x30, 0xb4, 0x4d, 0x36,
	0x16, 0xa3, 0xd0, 0xf2, 0xaa, 0xc9, 0xc2, 0x25, 0xbc, 0x6c, 0x18, 0x6b, 0xe6, 0xd9, 0x1d, 0xdb,
	0x8c, 0xa6, 0x3b, 0x66, 0x28, 0xd9, 0x72, 0xb9, 0x3f, 0xfe, 0xf4, 0x73, 0xe3, 0x89, 0xef, 0xbc,
	0x4d, 0x7c, 0xe7, 0x63, 0xe2, 0x3b, 0xaf, 0x5f, 0x7e, 0xee, 0x76, 0x6d, 0xea, 0xd6, 0xfc, 0x6f,
	0x23, 0x9f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x03, 0x60, 0xbd, 0x10, 0x49, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LeafGoServiceClient is the client API for LeafGoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LeafGoServiceClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSegment(ctx context.Context, in *GetSegmentReq, opts ...grpc.CallOption) (*GetSegmentRsp, error)
	GetSnowflake(ctx context.Context, in *GetSnowflakeReq, opts ...grpc.CallOption) (*GetSnowflakeRsp, error)
}

type leafGoServiceClient struct {
	cc *grpc.ClientConn
}

func NewLeafGoServiceClient(cc *grpc.ClientConn) LeafGoServiceClient {
	return &leafGoServiceClient{cc}
}

func (c *leafGoServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/leaf_go.v1.LeafGoService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leafGoServiceClient) GetSegment(ctx context.Context, in *GetSegmentReq, opts ...grpc.CallOption) (*GetSegmentRsp, error) {
	out := new(GetSegmentRsp)
	err := c.cc.Invoke(ctx, "/leaf_go.v1.LeafGoService/GetSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leafGoServiceClient) GetSnowflake(ctx context.Context, in *GetSnowflakeReq, opts ...grpc.CallOption) (*GetSnowflakeRsp, error) {
	out := new(GetSnowflakeRsp)
	err := c.cc.Invoke(ctx, "/leaf_go.v1.LeafGoService/GetSnowflake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeafGoServiceServer is the server API for LeafGoService service.
type LeafGoServiceServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	GetSegment(context.Context, *GetSegmentReq) (*GetSegmentRsp, error)
	GetSnowflake(context.Context, *GetSnowflakeReq) (*GetSnowflakeRsp, error)
}

// UnimplementedLeafGoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLeafGoServiceServer struct {
}

func (*UnimplementedLeafGoServiceServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedLeafGoServiceServer) GetSegment(ctx context.Context, req *GetSegmentReq) (*GetSegmentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegment not implemented")
}
func (*UnimplementedLeafGoServiceServer) GetSnowflake(ctx context.Context, req *GetSnowflakeReq) (*GetSnowflakeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnowflake not implemented")
}

func RegisterLeafGoServiceServer(s *grpc.Server, srv LeafGoServiceServer) {
	s.RegisterService(&_LeafGoService_serviceDesc, srv)
}

func _LeafGoService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeafGoServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaf_go.v1.LeafGoService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeafGoServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeafGoService_GetSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeafGoServiceServer).GetSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaf_go.v1.LeafGoService/GetSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeafGoServiceServer).GetSegment(ctx, req.(*GetSegmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeafGoService_GetSnowflake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnowflakeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeafGoServiceServer).GetSnowflake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaf_go.v1.LeafGoService/GetSnowflake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeafGoServiceServer).GetSnowflake(ctx, req.(*GetSnowflakeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _LeafGoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "leaf_go.v1.LeafGoService",
	HandlerType: (*LeafGoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _LeafGoService_Ping_Handler,
		},
		{
			MethodName: "GetSegment",
			Handler:    _LeafGoService_GetSegment_Handler,
		},
		{
			MethodName: "GetSnowflake",
			Handler:    _LeafGoService_GetSnowflake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leafgo_api.proto",
}

func (m *GetSegmentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSegmentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSegmentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintLeafgoApi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSegmentRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSegmentRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSegmentRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintLeafgoApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSnowflakeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSnowflakeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSnowflakeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintLeafgoApi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSnowflakeRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSnowflakeRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSnowflakeRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintLeafgoApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLeafgoApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovLeafgoApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetSegmentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLeafgoApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSegmentRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLeafgoApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSnowflakeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLeafgoApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSnowflakeRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLeafgoApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLeafgoApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLeafgoApi(x uint64) (n int) {
	return sovLeafgoApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetSegmentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeafgoApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSegmentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSegmentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeafgoApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeafgoApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeafgoApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLeafgoApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLeafgoApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLeafgoApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSegmentRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeafgoApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSegmentRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSegmentRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeafgoApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLeafgoApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLeafgoApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLeafgoApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSnowflakeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeafgoApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSnowflakeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSnowflakeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeafgoApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeafgoApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeafgoApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLeafgoApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLeafgoApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLeafgoApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSnowflakeRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeafgoApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSnowflakeRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSnowflakeRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeafgoApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLeafgoApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLeafgoApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLeafgoApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLeafgoApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLeafgoApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLeafgoApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLeafgoApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLeafgoApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLeafgoApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLeafgoApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLeafgoApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLeafgoApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLeafgoApi = fmt.Errorf("proto: unexpected end of group")
)
